/* tslint:disable */
/* eslint-disable */

type EpoxyIoStream = {
	read: ReadableStream<Uint8Array>,
	write: WritableStream<Uint8Array>,
};
type EpoxyWispTransport = string | (() => { read: ReadableStream<ArrayBuffer>, write: WritableStream<Uint8Array> });
type EpoxyWebSocketInput = string | ArrayBuffer;
type EpoxyWebSocketHeadersInput = Headers | { [key: string]: string };
type EpoxyUrlInput = string | URL;


export class EpoxyClient {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * @param {EpoxyWispTransport} transport
   * @param {EpoxyClientOptions} options
   */
  constructor(transport: EpoxyWispTransport, options: EpoxyClientOptions);
  /**
   * @returns {Promise<void>}
   */
  replace_stream_provider(): Promise<void>;
  /**
   * @param {EpoxyUrlInput} url
   * @param {object} options
   * @returns {Promise<Response>}
   */
  fetch(url: EpoxyUrlInput, options: object): Promise<Response>;
  buffer_size: number;
  redirect_limit: number;
  user_agent: string;
}
export class EpoxyClientOptions {
  free(): void;
  constructor();
  buffer_size: number;
  disable_certificate_validation: boolean;
  header_limit: number;
  redirect_limit: number;
  title_case_headers: boolean;
  udp_extension_required: boolean;
  user_agent: string;
  websocket_protocols: (string)[];
  wisp_v2: boolean;
}
export class EpoxyHandlers {
  free(): void;
  onclose: Function;
  onerror: Function;
  onmessage: Function;
  onopen: Function;
}
export class IntoUnderlyingByteSource {
  free(): void;
  /**
   * @param {ReadableByteStreamController} controller
   */
  start(controller: ReadableByteStreamController): void;
  /**
   * @param {ReadableByteStreamController} controller
   * @returns {Promise<any>}
   */
  pull(controller: ReadableByteStreamController): Promise<any>;
  cancel(): void;
  readonly autoAllocateChunkSize: number;
  readonly type: string;
}
export class IntoUnderlyingSink {
  free(): void;
  /**
   * @param {any} chunk
   * @returns {Promise<any>}
   */
  write(chunk: any): Promise<any>;
  /**
   * @returns {Promise<any>}
   */
  close(): Promise<any>;
  /**
   * @param {any} reason
   * @returns {Promise<any>}
   */
  abort(reason: any): Promise<any>;
}
export class IntoUnderlyingSource {
  free(): void;
  /**
   * @param {ReadableStreamDefaultController} controller
   * @returns {Promise<any>}
   */
  pull(controller: ReadableStreamDefaultController): Promise<any>;
  cancel(): void;
}



/**
* 
*
* @returns {Promise<void>}
*/
export default function __wbg_init (): Promise<void>;
export const info: { version: string, minimal: boolean, release: boolean };
